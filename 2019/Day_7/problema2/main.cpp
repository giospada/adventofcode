#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <algorithm>

//int input[]={4,0,99};
int *input ;
int *progrm;
// {3,225,1,225,6,6,1100,1,238,225,104,0,1101,65,39,225,2,14,169,224,101,-2340,224,224,4,224,1002,223,8,223,101,7,224,224,1,224,223,223,1001,144,70,224,101,-96,224,224,4,224,1002,223,8,223,1001,224,2,224,1,223,224,223,1101,92,65,225,1102,42,8,225,1002,61,84,224,101,-7728,224,224,4,224,102,8,223,223,1001,224,5,224,1,223,224,223,1102,67,73,224,1001,224,-4891,224,4,224,102,8,223,223,101,4,224,224,1,224,223,223,1102,54,12,225,102,67,114,224,101,-804,224,224,4,224,102,8,223,223,1001,224,3,224,1,224,223,223,1101,19,79,225,1101,62,26,225,101,57,139,224,1001,224,-76,224,4,224,1002,223,8,223,1001,224,2,224,1,224,223,223,1102,60,47,225,1101,20,62,225,1101,47,44,224,1001,224,-91,224,4,224,1002,223,8,223,101,2,224,224,1,224,223,223,1,66,174,224,101,-70,224,224,4,224,102,8,223,223,1001,224,6,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,108,226,226,224,102,2,223,223,1005,224,329,101,1,223,223,1107,226,677,224,1002,223,2,223,1005,224,344,101,1,223,223,8,226,677,224,102,2,223,223,1006,224,359,101,1,223,223,108,677,677,224,1002,223,2,223,1005,224,374,1001,223,1,223,1108,226,677,224,1002,223,2,223,1005,224,389,101,1,223,223,1007,677,677,224,1002,223,2,223,1006,224,404,1001,223,1,223,1108,677,677,224,102,2,223,223,1006,224,419,1001,223,1,223,1008,226,677,224,102,2,223,223,1005,224,434,101,1,223,223,107,677,677,224,102,2,223,223,1006,224,449,1001,223,1,223,1007,226,677,224,102,2,223,223,1005,224,464,101,1,223,223,7,677,226,224,102,2,223,223,1005,224,479,101,1,223,223,1007,226,226,224,102,2,223,223,1005,224,494,101,1,223,223,7,677,677,224,102,2,223,223,1006,224,509,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,524,1001,223,1,223,108,226,677,224,1002,223,2,223,1006,224,539,101,1,223,223,8,226,226,224,102,2,223,223,1006,224,554,101,1,223,223,8,677,226,224,102,2,223,223,1005,224,569,1001,223,1,223,1108,677,226,224,1002,223,2,223,1006,224,584,101,1,223,223,1107,677,226,224,1002,223,2,223,1005,224,599,101,1,223,223,107,226,226,224,102,2,223,223,1006,224,614,1001,223,1,223,7,226,677,224,102,2,223,223,1005,224,629,1001,223,1,223,107,677,226,224,1002,223,2,223,1005,224,644,1001,223,1,223,1107,677,677,224,102,2,223,223,1006,224,659,101,1,223,223,1008,226,226,224,1002,223,2,223,1006,224,674,1001,223,1,223,4,223,99,226};
int n = 0;

int *a;
int *b;
int *c;

using namespace std;

void par(int i2, int par)
{
    int i = input[i2] / 100;
    if (par == 0)
    {
        return;
    }
    c = &input[i2 + 1];
    if (i % 10 == 0)
    {
        c = &input[*c];
    }
    if (par == 1)
    {
        return;
    }
    i /= 10;
    b = &input[i2 + 2];
    if (i % 10 == 0)
    {
        b = &input[*b];
    }
    if (par == 2)
    {
        return;
    }
    i /= 10;
    a = &input[i2 + 3];
    if (i == 0)
    {
        a = &input[*a];
    }
}

int main()
{
    int i = 0;
	scanf("%d",&n);
	progrm=(int *)malloc(sizeof(int)*n);
	while(i<n){
		scanf("%d",&progrm[i++]);
	}
	i=0;
	int perm[]={5,6,7,8,9};
	int maxou=0;
    int done[5];
    int *memories[5];
    int outputs[5];
    int out;
    int instuction[5];
    for(int m=0;m<5;++m)
    {
        memories[m]=(int*)malloc(sizeof(int)*n);
        
    }
	do{
		for(int m=0;m<5;++m)
        {
//            outputs[m]=0;
            instuction[m]=0;
            done[m]=0;
            for(i=0;i<n;i++){
                memories[m][i]=progrm[i];
            }
        }
        out=0;
		for(int row=0;true;++row){
        	if(row==5){
                row=0;
            }
	    	input=memories[row];
            i=instuction[row];
            while (input[i] != 99)
	    	{
	           
	    	    // op c b a
	    	   switch (input[i] % 100)
	    	    {
	   
    			        //somma
    			    case 1:
    			        par(i, 3);
    			        *a = *c + *b;
    			        i += 4;
    			        break;
    			    //moltiplicazione
    			    case 2:
    			        par(i, 3);
    			        *a = *b * *c;
    			        i += 4;
    			        break;
    			    //output
    			    case 3:
    			        par(i, 1);
                 //       printf("%d\n",done[row] );
                        if(done[row]==0){
                            done[row]=1;
                            *c=perm[row];
                            //printf("%dfsf  d\n",perm[row]);
                        }else{
    		//	            *c=outputs[(row==4)?0:row+1];
                            *c=out;
                        }
                        //printf("%d:in %d\n",row,*c );
    			        i += 2;
    			        break;
    			    //input
    			    case 4:
    			        par(i, 1);
    			        //outputs[row]=*c;
                        out=*c;
                      //  printf("%d:out %d\n",row,*c);
                        i += 2;
                        goto label;
                        break;
    			        //jump-if-true
    			    case 5:
    			        par(i, 2);
        //                printf("%d\n",*c );
    			        if (*c)
    			            i = *b;
    			        else
    			            i += 3;
    			        break;
    			        //jump-if-false
    			    case 6:
    			        par(i, 2);
    			        if (!*c)
    			            i = *b;
    			        else
    			            i += 3;
    			        break;
    			        //less than
    			    case 7:
    			        par(i, 3);
    			        if (*c < *b)
    			            *a = 1;
    			        else
    			            *a = 0;
    			        i += 4;
    			        break;
    			        //equal
    			    case 8:
    			        par(i, 3);
    			        if (*c == *b)
    			            *a = 1;
    			        else
    			            *a = 0;
    			        i += 4;
    			        break;
				}
    		}
            label:
            instuction[row]=i;
            //printf("%d,%d :%d out:%d\n",instuction[row],row,input[i],outputs[row]);
            if(input[i]==99&&row==4)
                break;
    	    
        }
        //printf("%d\n",out);
    	if(out>maxou){
    		maxou=out;
    	}
   }while(next_permutation(perm,perm+5));
    printf("%d\n",maxou);
}

